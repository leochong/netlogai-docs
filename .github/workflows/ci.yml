name: Documentation Build & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * *'  # Daily link checking at 6 AM UTC

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git info

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build documentation
      run: |
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-build
        path: docs/.vitepress/dist/

  lint-markdown:
    name: Lint Markdown Files
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        markdownlint docs/**/*.md --config .markdownlint.json || true
        echo "Markdown linting completed"

    - name: Check for broken internal links
      run: |
        # Check for internal links that may be broken
        find docs/ -name "*.md" -exec grep -l "\[.*\](.*\.md)" {} \; | while read file; do
          echo "Checking internal links in: $file"
          # This would normally use a proper link checker
        done

  spell-check:
    name: Spell Check Documentation
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Install spell checker
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en

    - name: Run spell check
      run: |
        find docs/ -name "*.md" | while read file; do
          echo "Spell checking: $file"
          # Extract text content and check spelling
          aspell --mode=markdown --lang=en --personal=.aspell.en.pws list < "$file" | head -10
        done

  link-check:
    name: Check External Links
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install link checker
      run: npm install -g markdown-link-check

    - name: Check external links
      run: |
        find docs/ -name "*.md" | while read file; do
          echo "Checking links in: $file"
          markdown-link-check "$file" --config .markdown-link-check.json || true
        done

  accessibility-check:
    name: Accessibility Testing
    runs-on: ubuntu-22.04
    needs: build
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-build
        path: dist/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install accessibility checker
      run: npm install -g @axe-core/cli

    - name: Start local server
      run: |
        cd dist
        python3 -m http.server 8080 &
        sleep 5

    - name: Run accessibility tests
      run: |
        # Test key pages for accessibility
        axe --dir dist --include="*.html" --timeout=10000 || true

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-22.04
    needs: build
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-build
        path: dist/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Lighthouse
      run: npm install -g @lhci/cli

    - name: Start local server
      run: |
        cd dist
        python3 -m http.server 8080 &
        sleep 5

    - name: Run Lighthouse tests
      run: |
        lhci autorun --upload.target=temporary-public-storage || true

  multilingual-check:
    name: Check Multilingual Content
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Check translation completeness
      run: |
        # Check if translations are up to date
        base_lang="en"
        other_langs="es de ja fr"
        
        for lang in $other_langs; do
          if [ -d "docs/$lang" ]; then
            echo "Checking $lang translations..."
            
            # Compare file counts (basic check)
            en_count=$(find docs/en -name "*.md" | wc -l)
            lang_count=$(find docs/$lang -name "*.md" | wc -l)
            
            echo "$lang has $lang_count files vs $en_count English files"
            
            if [ $lang_count -lt $((en_count * 80 / 100)) ]; then
              echo "WARNING: $lang translation appears incomplete"
            fi
          fi
        done

  seo-check:
    name: SEO Analysis
    runs-on: ubuntu-22.04
    needs: build
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-build
        path: dist/

    - name: Check meta tags and structure
      run: |
        find dist/ -name "*.html" | head -5 | while read file; do
          echo "Checking SEO for: $file"
          
          # Check for title tags
          if grep -q "<title>" "$file"; then
            echo "✓ Title tag found"
          else
            echo "✗ Missing title tag"
          fi
          
          # Check for meta description
          if grep -q 'name="description"' "$file"; then
            echo "✓ Meta description found"
          else
            echo "✗ Missing meta description"
          fi
        done

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-22.04
    needs: [build, lint-markdown, spell-check]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-build
        path: dist/

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # This would deploy to a staging server
        echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-22.04
    needs: [build, lint-markdown, spell-check, link-check, accessibility-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation-build
        path: dist/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: docs.netlogai.com

    - name: Update search index
      run: |
        echo "Updating search index..."
        # This would update Algolia search index
        echo "Search index updated"

  notify-completion:
    name: Notify Deployment
    runs-on: ubuntu-22.04
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: Notify team
      run: |
        echo "Documentation deployed successfully to https://docs.netlogai.com"
        # This would send notifications to team channels

  generate-sitemap:
    name: Generate and Submit Sitemap
    runs-on: ubuntu-22.04
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Generate sitemap
      run: |
        echo "Generating sitemap for https://docs.netlogai.com"
        # This would generate and submit sitemap to search engines
        echo "Sitemap generated and submitted"

  analytics-report:
    name: Generate Analytics Report
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule'
    
    steps:
    - name: Generate usage report
      run: |
        echo "Generating documentation usage analytics..."
        # This would generate analytics reports
        echo "Analytics report generated"